{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.140375400Z",
     "start_time": "2025-01-21T18:08:36.667199500Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from ase import Atoms, geometry, neighborlist\n",
    "from ase.io import read, write\n",
    "\n",
    "from scipy.spatial.transform import Rotation\n",
    "\n",
    "import networkx as nx\n",
    "\n",
    "import metatensor\n",
    "from anisoap.representations import EllipsoidalDensityProjection\n",
    "from anisoap.utils import ClebschGordanReal, cg_combine, standardize_keys\n",
    "\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "from skmatter.preprocessing import StandardFlexibleScaler\n"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "We will use the file `planar_mols.xyz` for this example.  The file contains data for eleven planar molecules, where each molecule contains at least one benzene-like ring."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "267b58af6acf2663"
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [],
   "source": [
    "mols = read(\"planar_mols.xyz\", \":\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.154887200Z",
     "start_time": "2025-01-21T18:08:38.142376500Z"
    }
   },
   "id": "76b409d396cc189a"
  },
  {
   "cell_type": "markdown",
   "source": [
    "To pick out the carbon atoms that make up the benzene-like rings we will first represent the molecule as a graph.  We are only interested in the carbons, so we may filter out any other atoms that may be present."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "2ef43df18ab7f023"
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [],
   "source": [
    "def build_graph(mol: Atoms, nl=None):\n",
    "    if nl is None:\n",
    "        nl = neighborlist.build_neighbor_list(mol, self_interaction=False, bothways=True)\n",
    "    G = nx.Graph()\n",
    "    for i in range(len(mol)):\n",
    "        nb_indices, offsets = nl.get_neighbors(i)\n",
    "        el = [(i, nb) for nb in nb_indices]\n",
    "        G.add_edges_from(el)\n",
    "        G.nodes[i][\"symbol\"] = mol[i].symbol\n",
    "        \n",
    "    def filter_node(n):\n",
    "        return mol.arrays[\"numbers\"][n] == 6\n",
    "    \n",
    "    return nx.subgraph_view(G, filter_node=filter_node)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.159887500Z",
     "start_time": "2025-01-21T18:08:38.154887200Z"
    }
   },
   "id": "1aa35b4c128ccabf"
  },
  {
   "cell_type": "markdown",
   "source": [
    "For ease of visualization it is also helpful to center each molecule and adjust the cell sizes."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "7ad80071ad58c769"
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [],
   "source": [
    "def center_molecule(frame):\n",
    "    dist_vecs, _ = geometry.get_distances(frame.positions)\n",
    "    pos_vecs = frame.positions[0] + dist_vecs[0]\n",
    "    com = pos_vecs.mean(axis=0)\n",
    "    max_dim = np.max(pos_vecs.flatten())\n",
    "    frame.positions = frame.positions - com + max_dim / 2\n",
    "    frame.cell = np.eye(3) * max_dim"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.166399800Z",
     "start_time": "2025-01-21T18:08:38.158887200Z"
    }
   },
   "id": "29740b34039774b"
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [],
   "source": [
    "for mol in mols:\n",
    "    center_molecule(mol)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.180405600Z",
     "start_time": "2025-01-21T18:08:38.163394200Z"
    }
   },
   "id": "45da6101758cb840"
  },
  {
   "cell_type": "markdown",
   "source": [
    "We're now ready to pick out the atoms making up the benzene-like rings.  Using our previously defined function, we obtain a molecular graph.  Then, we use the NetworkX package to find all the simple cycles in the graph.  These correspond exactly with the rings of the molecule."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "8b737e26c02aec62"
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [],
   "source": [
    "def get_rings(frame, graph=None):\n",
    "    if graph is None:\n",
    "        G = build_graph(frame)\n",
    "    else:\n",
    "        G = graph\n",
    "    rings = nx.cycle_basis(G)\n",
    "    return rings"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.181406700Z",
     "start_time": "2025-01-21T18:08:38.178406900Z"
    }
   },
   "id": "9ea8c8c27c6f851b"
  },
  {
   "cell_type": "markdown",
   "source": [
    "We also need a way to determine the orientation of the rings so that we may correctly the corresponding ellipsoids.  In this tutorial, we will use ASE to find each ring's moments of inertia and principal axes, then use those axes to determine how to orient the ellipsoids."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "a0bb81f4e53c9832"
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [],
   "source": [
    "def get_cluster_data(ring):\n",
    "    moments, axes = ring.get_moments_of_inertia(vectors=True)\n",
    "    mass = np.sum([atom.mass for atom in ring])\n",
    "    return {\"moments\": moments, \"eigenvectors\": axes, \"mass\": mass}"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.190919700Z",
     "start_time": "2025-01-21T18:08:38.180405600Z"
    }
   },
   "id": "ae2e178095a34563"
  },
  {
   "cell_type": "markdown",
   "source": [
    "We're now in a position to define a function which will take in a molecule and output a new frame containing the ellipsoid representation of the system.  The function iterates over each ring and checks to see if it consists of six carbon atoms.  If it does, the function uses the ring's principal axes to calculate the quaternion representing its orientation.  The `axes` parameter is for setting the length of the ellipsoids' three axes."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "ca71f08c7af5223"
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "outputs": [],
   "source": [
    "def get_ellipsoids(frame, axes):\n",
    "    coms = []\n",
    "    quats = []\n",
    "    positions = []\n",
    "    dim1 = []\n",
    "    dim2 = []\n",
    "    dim3 = []\n",
    "    for i, ring in enumerate(get_rings(frame)):\n",
    "        # Check that ring is made of six carbons\n",
    "        cluster = frame[[a for a in range(len(frame)) if (a in ring and frame.arrays[\"numbers\"][a] == 6)]]\n",
    "        if len(cluster) != 6:\n",
    "            continue\n",
    "        dist_vecs, _ = geometry.get_distances(cluster.positions)\n",
    "        pos_vecs = cluster.positions[0] + dist_vecs[0]\n",
    "        com = pos_vecs.mean(axis=0).flatten()\n",
    "        # Construct the rotation matrix corresponding to ring's orientation\n",
    "        data = get_cluster_data(cluster)\n",
    "        rot = np.asarray(data[\"eigenvectors\"]).T\n",
    "        # Ensure that matrix is proper, i.e. det(R) = 1\n",
    "        if np.isclose(np.linalg.det(rot), -1):\n",
    "            rot = np.matmul(rot, [[-1, 0, 0], [0, 1, 0], [0, 0, 1]])\n",
    "        # Convert matrix representation to quaternions of the form (W, X, Y, Z)\n",
    "        quat = Rotation.from_matrix(rot).as_quat()\n",
    "        quat = np.roll(quat, 1)\n",
    "        quats.append(quat)\n",
    "        positions.append(pos_vecs)\n",
    "        coms.append(com)\n",
    "        dim1.append(axes[0])\n",
    "        dim2.append(axes[1])\n",
    "        dim3.append(axes[2])\n",
    "    if len(coms) == 0:\n",
    "        return None\n",
    "    ell_frame = Atoms(positions=np.vstack(coms), cell=frame.cell, pbc=frame.pbc)\n",
    "    ell_frame.arrays[\"quaternions\"] = np.vstack(quats)\n",
    "    ell_frame.arrays[\"c_diameter[1]\"] = np.array(dim1).flatten()\n",
    "    ell_frame.arrays[\"c_diameter[2]\"] = np.array(dim2).flatten()\n",
    "    ell_frame.arrays[\"c_diameter[3]\"] = np.array(dim3).flatten()\n",
    "    return ell_frame"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.195924800Z",
     "start_time": "2025-01-21T18:08:38.189914300Z"
    }
   },
   "id": "7e3ff8738a7e2276"
  },
  {
   "cell_type": "markdown",
   "source": [
    "This is just a function for applying `get_ellipsoids` to multiple molecules."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "90de6232c1a8513b"
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [],
   "source": [
    "def get_ell_frames(frames, axes):\n",
    "    ell_frames = []\n",
    "    failed_frames = []\n",
    "    for i, frame in enumerate(frames):\n",
    "        result = get_ellipsoids(frame, axes)\n",
    "        if result is None:\n",
    "            failed_frames.append(i)\n",
    "            continue\n",
    "        ell_frames.append(result)\n",
    "    return ell_frames, failed_frames"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.204920100Z",
     "start_time": "2025-01-21T18:08:38.194925900Z"
    }
   },
   "id": "efa9eb1af19f465e"
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now let's try it! For simplicity's sake, we will just use arbitrary constants as the lengths of the axes."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "57fd8a99127ce54a"
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successes:  11\n",
      "Failures:  0\n"
     ]
    }
   ],
   "source": [
    "AXIS_LENGTHS = [2.5, 2.5, 1.5]\n",
    "ells, failed = get_ell_frames(mols, AXIS_LENGTHS)\n",
    "print(\"Successes: \", len(ells))\n",
    "print(\"Failures: \", len(failed))"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.246441400Z",
     "start_time": "2025-01-21T18:08:38.204920100Z"
    }
   },
   "id": "78b4b39562e1a085"
  },
  {
   "cell_type": "markdown",
   "source": [
    "You should see that we have 11 successes and no failures.  Now, we can write our results to new files for visualization purposes."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "eebb41aebd86505a"
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "outputs": [],
   "source": [
    "write(\"planar_ells_ex.xyz\", ells)\n",
    "write(\"planar_mols_ex.xyz\", mols)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.252951300Z",
     "start_time": "2025-01-21T18:08:38.251950500Z"
    }
   },
   "id": "9c813177b83a4859"
  },
  {
   "cell_type": "markdown",
   "source": [
    "Finally, it's time to put AniSOAP to the test.  We first define some hyperparameters; for more information on these, please see the AniSOAP API reference.  We also calculate the Clebsch-Gordan coefficients, which will be used shortly."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "653a44277a671f80"
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "outputs": [],
   "source": [
    "lmax, nmax, gaussian, cutoff_radius = 9, 6, 1.5, 7.0\n",
    "mycg = ClebschGordanReal(lmax)\n",
    "\n",
    "ANISOAP_HYPERS = {\n",
    "    \"max_angular\": lmax,\n",
    "    \"max_radial\": nmax,\n",
    "    \"radial_basis_name\": \"gto\",\n",
    "    \"rotation_type\": \"quaternion\",\n",
    "    \"rotation_key\": \"quaternions\",\n",
    "    \"radial_gaussian_width\": gaussian,\n",
    "    \"cutoff_radius\": cutoff_radius,\n",
    "    \"basis_rcond\": 1e-8,\n",
    "    \"basis_tol\": 1e-4,\n",
    "}"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:38.771409300Z",
     "start_time": "2025-01-21T18:08:38.253950300Z"
    }
   },
   "id": "911d2d3cf39c606a"
  },
  {
   "cell_type": "markdown",
   "source": [
    "AniSOAP interoperates with the scikit-learn package.  As such, we'll define a calculator and call `transform` to get the ellipsoidal density projection.  We'll get some warnings, but in this case it's safe to ignore them."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "1f71e839a33233b2"
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/lucas/miniforge3/envs/featomic/lib/python3.11/site-packages/anisoap/representations/ellipsoidal_density_projection.py:547: UserWarning: In quaternion mode, quaternions are assumed to be in (w,x,y,z) format.\n",
      "  warnings.warn(\n",
      "/home/lucas/miniforge3/envs/featomic/lib/python3.11/site-packages/featomic/systems/ase.py:57: UserWarning: periodic boundary conditions are disabled, but the cell matrix is not zero, we will set the cell to zero.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "calculator = EllipsoidalDensityProjection(**ANISOAP_HYPERS)\n",
    "rep_raw = calculator.transform(ells)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:39.062587300Z",
     "start_time": "2025-01-21T18:08:38.774407700Z"
    }
   },
   "id": "a6a32a78d0b83bed"
  },
  {
   "cell_type": "markdown",
   "source": [
    "In order to get more useful representations of our molecules, we'll want to use our raw density projection to obtain the so-called power spectra.  We'll also scale our data in accordance with ML best-practices."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "ffbcb6b47ecffd0c"
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "outputs": [],
   "source": [
    "aniso_nu1 = standardize_keys(rep_raw)\n",
    "aniso_nu2 = cg_combine(\n",
    "    aniso_nu1,\n",
    "    aniso_nu1,\n",
    "    clebsch_gordan=mycg,\n",
    "    lcut=0,\n",
    "    other_keys_match=[\"types_center\"],\n",
    ")\n",
    "rep = metatensor.operations.mean_over_samples(aniso_nu2, sample_names=\"center\")\n",
    "x_raw = rep.block().values.squeeze()\n",
    "x_scaler_train = StandardFlexibleScaler(column_wise=False).fit(x_raw)\n",
    "x_train = x_scaler_train.transform(x_raw)\n"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:39.111625800Z",
     "start_time": "2025-01-21T18:08:39.059585900Z"
    }
   },
   "id": "1e10c993863d52c"
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x_train.T)\n",
    "plt.xlabel(\"index\")\n",
    "plt.ylabel(\"value\")\n",
    "plt.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:39.177398700Z",
     "start_time": "2025-01-21T18:08:39.087111300Z"
    }
   },
   "id": "3a1a2121d8ed785c"
  },
  {
   "cell_type": "markdown",
   "source": [
    "You should see a rather crude graph above.  These spiky curves are direct depictions of the power spectra we just found.  Though the plot on its own is not particularly useful, it does let us know that we've at least generated reasonable spectra."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "ce148d68455b3abb"
  },
  {
   "cell_type": "markdown",
   "source": [
    "The power spectra we just plotted will often be our input to the various analyses we'd like to perform.  You can think of each vector as containing the features for a single data point (in this case, a molecule).  To see the power spectra in action, we'll perform a simple PCA on our set of molecules."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "9930b94e17c5b342"
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2.47335507 -0.18185283]\n",
      " [-0.46273608 -0.00733643]\n",
      " [-0.46273608 -0.00733643]\n",
      " [-0.46273608 -0.00733643]\n",
      " [-0.46273608 -0.00733643]\n",
      " [ 1.69126961  0.24788072]\n",
      " [-0.46273608 -0.00733643]\n",
      " [-0.46273608 -0.00733643]\n",
      " [-0.46273608 -0.00733643]\n",
      " [-0.46273608 -0.00733643]\n",
      " [-0.46273608 -0.00733643]]\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca = PCA(n_components=2)\n",
    "pcs = pca.fit_transform(x_train)\n",
    "\n",
    "print(pcs)\n",
    "plt.scatter(pcs[:, 0], pcs[:, 1])\n",
    "plt.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:39.251853100Z",
     "start_time": "2025-01-21T18:08:39.175392600Z"
    }
   },
   "id": "4828b0ff477f7e7"
  },
  {
   "cell_type": "markdown",
   "source": [
    "At first glance, it looks like we've made an error somewhere -- we have eleven molecules, but only three points!  However, after examining the XYZ files, we can conclude that this is exactly what we'd expect!  Of the eleven molecules, one is represented by five ellipsoids, one is represented by three ellipsoids, and the rest contain only one ellipsoid.  Due to AniSOAP's invariance under rotation, each single ellipsoid frame has the same power spectrum!  This explains why we have only three distinct points on our plot."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "675a4cba914d2f1d"
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "outputs": [],
   "source": [
    "NLIST_KWARGS = {\n",
    "    \"skin\": 0.3,   # doesn't matter for this application.\n",
    "    \"sorted\": False,\n",
    "    \"self_interaction\": False,\n",
    "    \"bothways\": True\n",
    "}"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:39.251853100Z",
     "start_time": "2025-01-21T18:08:39.237853300Z"
    }
   },
   "id": "d29713247f2a69e3"
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-01-21T18:08:39.327873200Z",
     "start_time": "2025-01-21T18:08:39.238853700Z"
    }
   },
   "id": "f145aa3e7d0a51b3"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
